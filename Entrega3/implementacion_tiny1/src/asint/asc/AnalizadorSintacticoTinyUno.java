
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Wed May 26 16:25:07 CEST 2021
//----------------------------------------------------

package asint.asc;

import java_cup.runtime.*;
import alex.AnalizadorLexicoTinyUno;
import alex.UnidadLexica;
import alex.StringLocalizado;
import semops.SemOps;
import asint.TinyASint.*;
import errors.GestionErroresTinyUno;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Wed May 26 16:25:07 CEST 2021
  */
public class AnalizadorSintacticoTinyUno extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTinyUno() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTinyUno(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTinyUno(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\002\004\000\002\006" +
    "\002\000\002\006\004\000\002\007\003\000\002\007\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\006\000" +
    "\002\014\005\000\002\016\002\000\002\016\003\000\002" +
    "\015\003\000\002\015\005\000\002\017\005\000\002\017" +
    "\004\000\002\011\003\000\002\011\010\000\002\011\006" +
    "\000\002\011\004\000\002\025\003\000\002\025\005\000" +
    "\002\026\004\000\002\012\003\000\002\012\003\000\002" +
    "\013\003\000\002\013\003\000\002\013\003\000\002\013" +
    "\003\000\002\004\003\000\002\004\005\000\002\005\005" +
    "\000\002\005\007\000\002\005\011\000\002\005\007\000" +
    "\002\005\004\000\002\005\004\000\002\005\003\000\002" +
    "\005\004\000\002\005\004\000\002\005\005\000\002\005" +
    "\003\000\002\003\002\000\002\003\003\000\002\020\005" +
    "\000\002\022\002\000\002\022\003\000\002\021\003\000" +
    "\002\021\005\000\002\023\005\000\002\024\002\000\002" +
    "\024\003\000\002\027\005\000\002\027\005\000\002\027" +
    "\003\000\002\030\005\000\002\030\003\000\002\031\005" +
    "\000\002\031\003\000\002\032\005\000\002\032\003\000" +
    "\002\033\004\000\002\033\004\000\002\033\003\000\002" +
    "\034\004\000\002\034\003\000\002\035\004\000\002\035" +
    "\003\000\002\036\005\000\002\036\003\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\036\003\000" +
    "\002\036\003\000\002\036\003\000\002\037\003\000\002" +
    "\040\003\000\002\041\003\000\002\041\003\000\002\042" +
    "\003\000\002\042\003\000\002\042\003\000\002\042\003" +
    "\000\002\042\003\000\002\042\003\000\002\043\003\000" +
    "\002\043\003\000\002\043\003\000\002\044\003\000\002" +
    "\045\003\000\002\047\005\000\002\047\004\000\002\047" +
    "\004\000\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\060\004\uffff\005\uffff\020\uffff\022\uffff\031" +
    "\uffff\042\uffff\043\uffff\045\uffff\046\010\047\uffff\053\uffff" +
    "\056\uffff\063\uffff\064\uffff\065\uffff\066\uffff\067\uffff\070" +
    "\004\071\012\072\uffff\073\uffff\074\uffff\075\uffff\001\002" +
    "\000\022\037\014\040\023\041\015\044\022\057\021\060" +
    "\017\062\024\072\025\001\002\000\052\004\103\005\114" +
    "\020\074\022\124\031\054\042\105\043\125\045\131\047" +
    "\110\053\101\056\077\063\127\064\130\065\073\066\112" +
    "\067\132\072\126\073\123\074\076\075\117\001\002\000" +
    "\004\002\072\001\002\000\006\024\ufffd\025\ufffd\001\002" +
    "\000\004\072\050\001\002\000\006\024\046\025\045\001" +
    "\002\000\022\037\014\040\023\041\015\044\022\057\021" +
    "\060\017\062\024\072\025\001\002\000\004\072\044\001" +
    "\002\000\006\036\uffe8\072\uffe8\001\002\000\006\036\uffe6" +
    "\072\uffe6\001\002\000\006\036\uffea\072\uffea\001\002\000" +
    "\004\027\037\001\002\000\006\036\ufff1\072\ufff1\001\002" +
    "\000\004\031\027\001\002\000\006\036\uffe5\072\uffe5\001" +
    "\002\000\006\036\uffe7\072\uffe7\001\002\000\014\037\014" +
    "\040\023\041\015\044\022\072\025\001\002\000\006\036" +
    "\uffe9\072\uffe9\001\002\000\006\036\uffee\072\uffee\001\002" +
    "\000\022\037\014\040\023\041\015\044\022\057\021\060" +
    "\017\062\024\072\025\001\002\000\004\072\036\001\002" +
    "\000\006\024\034\032\033\001\002\000\006\024\uffed\032" +
    "\uffed\001\002\000\006\036\uffef\072\uffef\001\002\000\022" +
    "\037\014\040\023\041\015\044\022\057\021\060\017\062" +
    "\024\072\025\001\002\000\006\024\uffec\032\uffec\001\002" +
    "\000\006\024\uffeb\032\uffeb\001\002\000\004\073\040\001" +
    "\002\000\004\030\041\001\002\000\004\061\042\001\002" +
    "\000\014\037\014\040\023\041\015\044\022\072\025\001" +
    "\002\000\006\036\ufff0\072\ufff0\001\002\000\006\024\ufffa" +
    "\025\ufffa\001\002\000\052\004\ufffe\005\ufffe\020\ufffe\022" +
    "\ufffe\031\ufffe\042\ufffe\043\ufffe\045\ufffe\047\ufffe\053\ufffe" +
    "\056\ufffe\063\ufffe\064\ufffe\065\ufffe\066\ufffe\067\ufffe\072" +
    "\ufffe\073\ufffe\074\ufffe\075\ufffe\001\002\000\010\046\010" +
    "\070\004\071\012\001\002\000\006\024\ufffc\025\ufffc\001" +
    "\002\000\004\022\051\001\002\000\024\023\ufff7\037\014" +
    "\040\023\041\015\044\022\057\021\060\017\062\024\072" +
    "\025\001\002\000\004\031\054\001\002\000\006\024\ufff9" +
    "\025\ufff9\001\002\000\062\004\uffff\005\uffff\020\uffff\022" +
    "\uffff\031\uffff\032\uffcf\042\uffff\043\uffff\045\uffff\046\010" +
    "\047\uffff\053\uffff\056\uffff\063\uffff\064\uffff\065\uffff\066" +
    "\uffff\067\uffff\070\004\071\012\072\uffff\073\uffff\074\uffff" +
    "\075\uffff\001\002\000\004\032\uffce\001\002\000\004\032" +
    "\057\001\002\000\020\002\uffd0\024\uffd0\025\uffd0\032\uffd0" +
    "\051\uffd0\052\uffd0\055\uffd0\001\002\000\006\036\067\072" +
    "\070\001\002\000\004\023\066\001\002\000\006\023\ufff5" +
    "\034\ufff5\001\002\000\006\023\ufff6\034\064\001\002\000" +
    "\022\037\014\040\023\041\015\044\022\057\021\060\017" +
    "\062\024\072\025\001\002\000\006\023\ufff4\034\ufff4\001" +
    "\002\000\004\031\ufff8\001\002\000\004\072\071\001\002" +
    "\000\006\023\ufff2\034\ufff2\001\002\000\006\023\ufff3\034" +
    "\ufff3\001\002\000\004\002\000\001\002\000\030\004\103" +
    "\005\114\020\074\022\124\042\105\043\125\045\131\072" +
    "\126\073\123\074\076\075\117\001\002\000\024\005\uffa8" +
    "\022\uffa8\042\uffa8\043\uffa8\045\uffa8\072\uffa8\073\uffa8\074" +
    "\uffa8\075\uffa8\001\002\000\010\002\001\024\203\032\001" +
    "\001\002\000\072\002\uffbb\005\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb" +
    "\017\uffbb\020\uffbb\021\uffbb\023\uffbb\024\uffbb\026\uffbb\027" +
    "\uffbb\030\uffbb\032\uffbb\033\uffbb\034\uffbb\035\uffbb\050\uffbb" +
    "\051\uffbb\052\uffbb\054\uffbb\055\uffbb\001\002\000\004\072" +
    "\223\001\002\000\024\005\114\022\124\042\105\043\125" +
    "\045\131\072\126\073\123\074\076\075\117\001\002\000" +
    "\030\004\103\005\114\020\074\022\124\042\105\043\125" +
    "\045\131\072\126\073\123\074\076\075\117\001\002\000" +
    "\030\004\103\005\114\020\074\022\124\042\105\043\125" +
    "\045\131\072\126\073\123\074\076\075\117\001\002\000" +
    "\030\004\uffa7\005\uffa7\020\uffa7\022\uffa7\042\uffa7\043\uffa7" +
    "\045\uffa7\072\uffa7\073\uffa7\074\uffa7\075\uffa7\001\002\000" +
    "\072\002\uffbe\005\uffbe\006\uffbe\007\uffbe\010\uffbe\011\uffbe" +
    "\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe\017\uffbe\020" +
    "\uffbe\021\uffbe\023\uffbe\024\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\032\uffbe\033\uffbe\034\uffbe\035\uffbe\050\uffbe\051\uffbe\052" +
    "\uffbe\054\uffbe\055\uffbe\001\002\000\072\002\uffb9\005\uffb9" +
    "\006\uffb9\007\uffb9\010\uffb9\011\uffb9\012\uffb9\013\uffb9\014" +
    "\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9\023\uffb9" +
    "\024\uffb9\026\uffb9\027\uffb9\030\uffb9\032\uffb9\033\uffb9\034" +
    "\uffb9\035\uffb9\050\uffb9\051\uffb9\052\uffb9\054\uffb9\055\uffb9" +
    "\001\002\000\072\002\uffc0\005\uffc0\006\uffc0\007\uffc0\010" +
    "\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0" +
    "\017\uffc0\020\uffc0\021\uffc0\023\uffc0\024\uffc0\026\uffc0\027" +
    "\uffc0\030\uffc0\032\uffc0\033\uffc0\034\uffc0\035\uffc0\050\uffc0" +
    "\051\uffc0\052\uffc0\054\uffc0\055\uffc0\001\002\000\072\002" +
    "\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2" +
    "\013\uffc2\014\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\021" +
    "\uffc2\023\uffc2\024\uffc2\026\uffc2\027\207\030\uffc2\032\uffc2" +
    "\033\206\034\uffc2\035\205\050\uffc2\051\uffc2\052\uffc2\054" +
    "\uffc2\055\uffc2\001\002\000\030\004\103\005\114\020\074" +
    "\022\124\042\105\043\125\045\131\072\126\073\123\074" +
    "\076\075\117\001\002\000\064\002\uffc5\005\171\006\170" +
    "\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\014\uffc5\015" +
    "\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\023\uffc5\024\uffc5" +
    "\026\167\030\uffc5\032\uffc5\034\uffc5\050\uffc5\051\uffc5\052" +
    "\uffc5\054\uffc5\055\uffc5\001\002\000\030\004\103\005\114" +
    "\020\074\022\124\042\105\043\125\045\131\072\126\073" +
    "\123\074\076\075\117\001\002\000\056\002\uffc7\007\uffc7" +
    "\010\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016" +
    "\uffc7\017\uffc7\020\uffc7\021\uffc7\023\uffc7\024\uffc7\030\uffc7" +
    "\032\uffc7\034\uffc7\050\uffc7\051\uffc7\052\uffc7\054\uffc7\055" +
    "\uffc7\001\002\000\024\005\uffa3\022\uffa3\042\uffa3\043\uffa3" +
    "\045\uffa3\072\uffa3\073\uffa3\074\uffa3\075\uffa3\001\002\000" +
    "\016\002\uffe4\024\uffe4\032\uffe4\051\uffe4\052\uffe4\055\uffe4" +
    "\001\002\000\056\002\uffc9\007\160\010\162\011\157\012" +
    "\161\013\156\014\155\015\uffc9\016\uffc9\017\uffc9\020\uffc9" +
    "\021\uffc9\023\uffc9\024\uffc9\030\uffc9\032\uffc9\034\uffc9\050" +
    "\uffc9\051\uffc9\052\uffc9\054\uffc9\055\uffc9\001\002\000\072" +
    "\002\uffba\005\uffba\006\uffba\007\uffba\010\uffba\011\uffba\012" +
    "\uffba\013\uffba\014\uffba\015\uffba\016\uffba\017\uffba\020\uffba" +
    "\021\uffba\023\uffba\024\uffba\026\uffba\027\uffba\030\uffba\032" +
    "\uffba\033\uffba\034\uffba\035\uffba\050\uffba\051\uffba\052\uffba" +
    "\054\uffba\055\uffba\001\002\000\024\005\114\022\124\042" +
    "\105\043\125\045\131\072\126\073\123\074\076\075\117" +
    "\001\002\000\042\002\uffcb\015\144\016\150\017\143\020" +
    "\146\021\uffcb\023\uffcb\024\uffcb\030\uffcb\032\uffcb\034\uffcb" +
    "\050\uffcb\051\uffcb\052\uffcb\054\uffcb\055\uffcb\001\002\000" +
    "\004\021\140\001\002\000\072\002\uffbc\005\uffbc\006\uffbc" +
    "\007\uffbc\010\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\023\uffbc\024\uffbc" +
    "\026\uffbc\027\uffbc\030\uffbc\032\uffbc\033\uffbc\034\uffbc\035" +
    "\uffbc\050\uffbc\051\uffbc\052\uffbc\054\uffbc\055\uffbc\001\002" +
    "\000\030\004\103\005\114\020\074\022\124\042\105\043" +
    "\125\045\131\072\126\073\123\074\076\075\117\001\002" +
    "\000\072\002\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8\011" +
    "\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\017\uffb8" +
    "\020\uffb8\021\uffb8\023\uffb8\024\uffb8\026\uffb8\027\uffb8\030" +
    "\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8\050\uffb8\051\uffb8" +
    "\052\uffb8\054\uffb8\055\uffb8\001\002\000\072\002\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\010\uffb7\011\uffb7\012\uffb7\013\uffb7" +
    "\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7\021\uffb7\023" +
    "\uffb7\024\uffb7\026\uffb7\027\uffb7\030\uffb7\032\uffb7\033\uffb7" +
    "\034\uffb7\035\uffb7\050\uffb7\051\uffb7\052\uffb7\054\uffb7\055" +
    "\uffb7\001\002\000\030\004\103\005\114\020\074\022\124" +
    "\042\105\043\125\045\131\072\126\073\123\074\076\075" +
    "\117\001\002\000\030\004\103\005\114\020\074\022\124" +
    "\042\105\043\125\045\131\072\126\073\123\074\076\075" +
    "\117\001\002\000\072\002\uffb6\005\uffb6\006\uffb6\007\uffb6" +
    "\010\uffb6\011\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016" +
    "\uffb6\017\uffb6\020\uffb6\021\uffb6\023\uffb6\024\uffb6\026\uffb6" +
    "\027\uffb6\030\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\050" +
    "\uffb6\051\uffb6\052\uffb6\054\uffb6\055\uffb6\001\002\000\016" +
    "\002\uffdc\024\uffdc\032\uffdc\051\uffdc\052\uffdc\055\uffdc\001" +
    "\002\000\016\002\uffd8\024\uffd8\032\uffd8\051\uffd8\052\uffd8" +
    "\055\uffd8\001\002\000\016\002\uffda\024\uffda\032\uffda\051" +
    "\uffda\052\uffda\055\uffda\001\002\000\016\002\uffdb\024\uffdb" +
    "\032\uffdb\051\uffdb\052\uffdb\055\uffdb\001\002\000\004\023" +
    "\137\001\002\000\072\002\uffbd\005\uffbd\006\uffbd\007\uffbd" +
    "\010\uffbd\011\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016" +
    "\uffbd\017\uffbd\020\uffbd\021\uffbd\023\uffbd\024\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\032\uffbd\033\uffbd\034\uffbd\035\uffbd\050" +
    "\uffbd\051\uffbd\052\uffbd\054\uffbd\055\uffbd\001\002\000\030" +
    "\004\103\005\114\020\074\022\124\042\105\043\125\045" +
    "\131\072\126\073\123\074\076\075\117\001\002\000\016" +
    "\002\uffe2\024\uffe2\032\uffe2\051\uffe2\052\uffe2\055\uffe2\001" +
    "\002\000\030\004\103\005\114\020\074\022\124\042\105" +
    "\043\125\045\131\072\126\073\123\074\076\075\117\001" +
    "\002\000\030\004\uffb5\005\uffb5\020\uffb5\022\uffb5\042\uffb5" +
    "\043\uffb5\045\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\001" +
    "\002\000\030\004\uffb3\005\uffb3\020\uffb3\022\uffb3\042\uffb3" +
    "\043\uffb3\045\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\001" +
    "\002\000\030\004\103\005\114\020\074\022\124\042\105" +
    "\043\125\045\131\072\126\073\123\074\076\075\117\001" +
    "\002\000\030\004\uffb4\005\uffb4\020\uffb4\022\uffb4\042\uffb4" +
    "\043\uffb4\045\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\001" +
    "\002\000\030\004\103\005\114\020\074\022\124\042\105" +
    "\043\125\045\131\072\126\073\123\074\076\075\117\001" +
    "\002\000\030\004\uffb2\005\uffb2\020\uffb2\022\uffb2\042\uffb2" +
    "\043\uffb2\045\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\001" +
    "\002\000\032\002\uffcd\021\uffcd\023\uffcd\024\uffcd\030\uffcd" +
    "\032\uffcd\034\uffcd\050\uffcd\051\uffcd\052\uffcd\054\uffcd\055" +
    "\uffcd\001\002\000\036\002\uffcc\015\144\016\150\021\uffcc" +
    "\023\uffcc\024\uffcc\030\uffcc\032\uffcc\034\uffcc\050\uffcc\051" +
    "\uffcc\052\uffcc\054\uffcc\055\uffcc\001\002\000\056\002\uffca" +
    "\007\160\010\162\011\157\012\161\013\156\014\155\015" +
    "\uffca\016\uffca\017\uffca\020\uffca\021\uffca\023\uffca\024\uffca" +
    "\030\uffca\032\uffca\034\uffca\050\uffca\051\uffca\052\uffca\054" +
    "\uffca\055\uffca\001\002\000\030\004\103\005\114\020\074" +
    "\022\124\042\105\043\125\045\131\072\126\073\123\074" +
    "\076\075\117\001\002\000\030\004\uffac\005\uffac\020\uffac" +
    "\022\uffac\042\uffac\043\uffac\045\uffac\072\uffac\073\uffac\074" +
    "\uffac\075\uffac\001\002\000\030\004\uffad\005\uffad\020\uffad" +
    "\022\uffad\042\uffad\043\uffad\045\uffad\072\uffad\073\uffad\074" +
    "\uffad\075\uffad\001\002\000\030\004\uffaf\005\uffaf\020\uffaf" +
    "\022\uffaf\042\uffaf\043\uffaf\045\uffaf\072\uffaf\073\uffaf\074" +
    "\uffaf\075\uffaf\001\002\000\030\004\uffb1\005\uffb1\020\uffb1" +
    "\022\uffb1\042\uffb1\043\uffb1\045\uffb1\072\uffb1\073\uffb1\074" +
    "\uffb1\075\uffb1\001\002\000\030\004\uffae\005\uffae\020\uffae" +
    "\022\uffae\042\uffae\043\uffae\045\uffae\072\uffae\073\uffae\074" +
    "\uffae\075\uffae\001\002\000\030\004\uffb0\005\uffb0\020\uffb0" +
    "\022\uffb0\042\uffb0\043\uffb0\045\uffb0\072\uffb0\073\uffb0\074" +
    "\uffb0\075\uffb0\001\002\000\056\002\uffc8\007\uffc8\010\uffc8" +
    "\011\uffc8\012\uffc8\013\uffc8\014\uffc8\015\uffc8\016\uffc8\017" +
    "\uffc8\020\uffc8\021\uffc8\023\uffc8\024\uffc8\030\uffc8\032\uffc8" +
    "\034\uffc8\050\uffc8\051\uffc8\052\uffc8\054\uffc8\055\uffc8\001" +
    "\002\000\072\002\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016\uffbf\017" +
    "\uffbf\020\uffbf\021\uffbf\023\uffbf\024\uffbf\026\uffbf\027\uffbf" +
    "\030\uffbf\032\uffbf\033\uffbf\034\uffbf\035\uffbf\050\uffbf\051" +
    "\uffbf\052\uffbf\054\uffbf\055\uffbf\001\002\000\016\002\uffdd" +
    "\024\uffdd\032\uffdd\051\uffdd\052\uffdd\055\uffdd\001\002\000" +
    "\030\004\103\005\114\020\074\022\124\042\105\043\125" +
    "\045\131\072\126\073\123\074\076\075\117\001\002\000" +
    "\030\004\uffa9\005\uffa9\020\uffa9\022\uffa9\042\uffa9\043\uffa9" +
    "\045\uffa9\072\uffa9\073\uffa9\074\uffa9\075\uffa9\001\002\000" +
    "\030\004\uffaa\005\uffaa\020\uffaa\022\uffaa\042\uffaa\043\uffaa" +
    "\045\uffaa\072\uffaa\073\uffaa\074\uffaa\075\uffaa\001\002\000" +
    "\030\004\uffab\005\uffab\020\uffab\022\uffab\042\uffab\043\uffab" +
    "\045\uffab\072\uffab\073\uffab\074\uffab\075\uffab\001\002\000" +
    "\056\002\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6" +
    "\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\023" +
    "\uffc6\024\uffc6\030\uffc6\032\uffc6\034\uffc6\050\uffc6\051\uffc6" +
    "\052\uffc6\054\uffc6\055\uffc6\001\002\000\004\050\174\001" +
    "\002\000\056\004\103\005\114\020\074\022\124\031\054" +
    "\042\105\043\125\045\131\047\110\051\uffd7\052\uffd7\053" +
    "\101\056\077\063\127\064\130\065\073\066\112\067\132" +
    "\072\126\073\123\074\076\075\117\001\002\000\012\024" +
    "\203\051\uffd6\052\uffd6\055\uffd6\001\002\000\006\051\177" +
    "\052\200\001\002\000\054\004\103\005\114\020\074\022" +
    "\124\031\054\042\105\043\125\045\131\047\110\052\uffd7" +
    "\053\101\056\077\063\127\064\130\065\073\066\112\067" +
    "\132\072\126\073\123\074\076\075\117\001\002\000\016" +
    "\002\uffe1\024\uffe1\032\uffe1\051\uffe1\052\uffe1\055\uffe1\001" +
    "\002\000\004\052\202\001\002\000\016\002\uffe0\024\uffe0" +
    "\032\uffe0\051\uffe0\052\uffe0\055\uffe0\001\002\000\052\004" +
    "\103\005\114\020\074\022\124\031\054\042\105\043\125" +
    "\045\131\047\110\053\101\056\077\063\127\064\130\065" +
    "\073\066\112\067\132\072\126\073\123\074\076\075\117" +
    "\001\002\000\016\002\uffe3\024\uffe3\032\uffe3\051\uffe3\052" +
    "\uffe3\055\uffe3\001\002\000\004\072\214\001\002\000\004" +
    "\072\213\001\002\000\030\004\103\005\114\020\074\022" +
    "\124\042\105\043\125\045\131\072\126\073\123\074\076" +
    "\075\117\001\002\000\072\002\uffc1\005\uffc1\006\uffc1\007" +
    "\uffc1\010\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1" +
    "\016\uffc1\017\uffc1\020\uffc1\021\uffc1\023\uffc1\024\uffc1\026" +
    "\uffc1\027\uffc1\030\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\054\uffc1\055\uffc1\001\002\000" +
    "\004\030\212\001\002\000\072\002\uffa6\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015" +
    "\uffa6\016\uffa6\017\uffa6\020\uffa6\021\uffa6\023\uffa6\024\uffa6" +
    "\026\uffa6\027\uffa6\030\uffa6\032\uffa6\033\uffa6\034\uffa6\035" +
    "\uffa6\050\uffa6\051\uffa6\052\uffa6\054\uffa6\055\uffa6\001\002" +
    "\000\072\002\uffa5\005\uffa5\006\uffa5\007\uffa5\010\uffa5\011" +
    "\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5\016\uffa5\017\uffa5" +
    "\020\uffa5\021\uffa5\023\uffa5\024\uffa5\026\uffa5\027\uffa5\030" +
    "\uffa5\032\uffa5\033\uffa5\034\uffa5\035\uffa5\050\uffa5\051\uffa5" +
    "\052\uffa5\054\uffa5\055\uffa5\001\002\000\072\002\uffa4\005" +
    "\uffa4\006\uffa4\007\uffa4\010\uffa4\011\uffa4\012\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\016\uffa4\017\uffa4\020\uffa4\021\uffa4\023" +
    "\uffa4\024\uffa4\026\uffa4\027\uffa4\030\uffa4\032\uffa4\033\uffa4" +
    "\034\uffa4\035\uffa4\050\uffa4\051\uffa4\052\uffa4\054\uffa4\055" +
    "\uffa4\001\002\000\064\002\uffc3\005\uffc3\006\uffc3\007\uffc3" +
    "\010\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3\015\uffc3\016" +
    "\uffc3\017\uffc3\020\uffc3\021\uffc3\023\uffc3\024\uffc3\026\uffc3" +
    "\030\uffc3\032\uffc3\034\uffc3\050\uffc3\051\uffc3\052\uffc3\054" +
    "\uffc3\055\uffc3\001\002\000\004\054\217\001\002\000\054" +
    "\004\103\005\114\020\074\022\124\031\054\042\105\043" +
    "\125\045\131\047\110\053\101\055\uffd7\056\077\063\127" +
    "\064\130\065\073\066\112\067\132\072\126\073\123\074" +
    "\076\075\117\001\002\000\004\055\221\001\002\000\016" +
    "\002\uffdf\024\uffdf\032\uffdf\051\uffdf\052\uffdf\055\uffdf\001" +
    "\002\000\072\002\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017" +
    "\uffc4\020\uffc4\021\uffc4\023\uffc4\024\uffc4\026\uffc4\027\207" +
    "\030\uffc4\032\uffc4\033\206\034\uffc4\035\205\050\uffc4\051" +
    "\uffc4\052\uffc4\054\uffc4\055\uffc4\001\002\000\004\022\224" +
    "\001\002\000\032\004\103\005\114\020\074\022\124\023" +
    "\uffd4\042\105\043\125\045\131\072\126\073\123\074\076" +
    "\075\117\001\002\000\016\002\uffd9\024\uffd9\032\uffd9\051" +
    "\uffd9\052\uffd9\055\uffd9\001\002\000\006\023\uffd3\034\232" +
    "\001\002\000\006\023\uffd2\034\uffd2\001\002\000\004\023" +
    "\231\001\002\000\016\002\uffd5\024\uffd5\032\uffd5\051\uffd5" +
    "\052\uffd5\055\uffd5\001\002\000\030\004\103\005\114\020" +
    "\074\022\124\042\105\043\125\045\131\072\126\073\123" +
    "\074\076\075\117\001\002\000\006\023\uffd1\034\uffd1\001" +
    "\002\000\016\002\uffde\024\uffde\032\uffde\051\uffde\052\uffde" +
    "\055\uffde\001\002\000\004\072\236\001\002\000\006\024" +
    "\ufffb\025\ufffb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\234\000\012\002\005\006\004\007\010\010\006\001" +
    "\001\000\010\011\234\012\017\013\015\001\001\000\036" +
    "\004\074\005\114\023\132\027\121\030\120\031\115\032" +
    "\112\033\110\034\106\035\105\036\103\044\077\045\101" +
    "\046\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\011\012\012\017" +
    "\013\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\025\013\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\027\012\017\013\015\025" +
    "\030\026\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\011\027\012" +
    "\017\013\015\026\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\012\042\013\015\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\010\046\001" +
    "\001\000\002\001\001\000\004\014\051\001\001\000\016" +
    "\011\057\012\017\013\015\015\062\016\060\017\061\001" +
    "\001\000\004\023\052\001\001\000\002\001\001\000\014" +
    "\002\054\006\004\007\010\010\006\024\055\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\057\012\017\013\015\017\064\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\027\233\030\120\031\115\032\112\033\110\034\106\035" +
    "\105\036\103\044\077\045\101\046\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\034\221\035\105\036\103\046\117\001\001" +
    "\000\030\027\215\030\120\031\115\032\112\033\110\034" +
    "\106\035\105\036\103\044\077\045\101\046\117\001\001" +
    "\000\020\033\214\034\106\035\105\036\103\044\077\045" +
    "\101\046\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\047\207\001" +
    "\001\000\030\027\172\030\120\031\115\032\112\033\110" +
    "\034\106\035\105\036\103\044\077\045\101\046\117\001" +
    "\001\000\004\043\165\001\001\000\030\027\164\030\120" +
    "\031\115\032\112\033\110\034\106\035\105\036\103\044" +
    "\077\045\101\046\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\042\153\001\001\000" +
    "\002\001\001\000\010\035\163\036\103\046\117\001\001" +
    "\000\010\037\146\040\144\041\141\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\027\135\030\120\031\115" +
    "\032\112\033\110\034\106\035\105\036\103\044\077\045" +
    "\101\046\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\030\027\134\030\120\031\115\032\112\033\110\034" +
    "\106\035\105\036\103\044\077\045\101\046\117\001\001" +
    "\000\030\027\133\030\120\031\115\032\112\033\110\034" +
    "\106\035\105\036\103\044\077\045\101\046\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\027\140\030\120\031\115\032\112\033" +
    "\110\034\106\035\105\036\103\044\077\045\101\046\117" +
    "\001\001\000\002\001\001\000\024\031\152\032\112\033" +
    "\110\034\106\035\105\036\103\044\077\045\101\046\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\026\030" +
    "\151\031\115\032\112\033\110\034\106\035\105\036\103" +
    "\044\077\045\101\046\117\001\001\000\002\001\001\000" +
    "\030\027\150\030\120\031\115\032\112\033\110\034\106" +
    "\035\105\036\103\044\077\045\101\046\117\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\041\141\001\001" +
    "\000\004\042\153\001\001\000\022\032\162\033\110\034" +
    "\106\035\105\036\103\044\077\045\101\046\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\033" +
    "\171\034\106\035\105\036\103\044\077\045\101\046\117" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\003\175" +
    "\004\174\005\114\023\132\027\121\030\120\031\115\032" +
    "\112\033\110\034\106\035\105\036\103\044\077\045\101" +
    "\046\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\003\200\004\174\005\114\023\132\027\121\030\120" +
    "\031\115\032\112\033\110\034\106\035\105\036\103\044" +
    "\077\045\101\046\117\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\005\203\023\132\027" +
    "\121\030\120\031\115\032\112\033\110\034\106\035\105" +
    "\036\103\044\077\045\101\046\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\027\210" +
    "\030\120\031\115\032\112\033\110\034\106\035\105\036" +
    "\103\044\077\045\101\046\117\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\003\217\004\174\005\114\023\132\027\121\030\120\031" +
    "\115\032\112\033\110\034\106\035\105\036\103\044\077" +
    "\045\101\046\117\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\047\207\001\001\000\004\020\224\001\001" +
    "\000\034\021\225\022\227\027\226\030\120\031\115\032" +
    "\112\033\110\034\106\035\105\036\103\044\077\045\101" +
    "\046\117\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\027\232\030\120\031\115\032\112\033\110\034\106\035" +
    "\105\036\103\044\077\045\101\046\117\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTinyUno$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTinyUno$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTinyUno$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTinyUno();
   AnalizadorLexicoTinyUno alex = (AnalizadorLexicoTinyUno)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
    private GestionErroresTinyUno errores;
    public void syntax_error(Symbol unidadLexica) {
        errores.errorSintactico((UnidadLexica)unidadLexica);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTinyUno$actions {


	private SemOps sem = new SemOps();

  private final AnalizadorSintacticoTinyUno parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTinyUno$actions(AnalizadorSintacticoTinyUno parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTinyUno$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTinyUno$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTinyUno$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTinyUno$stack,
    int                        CUP$AnalizadorSintacticoTinyUno$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTinyUno$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTinyUno$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= Decs Insts 
            {
              Prog RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.prog(decs,insts); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTinyUno$parser.done_parsing();
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Decs ::= 
            {
              Decs RESULT =null;
		 RESULT = null; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Decs",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Decs ::= LDecs SEPARADOR 
            {
              Decs RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		 RESULT = decs; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Decs",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDecs ::= Dec 
            {
              Decs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.decs_una(dec); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("LDecs",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LDecs ::= LDecs PUNTOCOM Dec 
            {
              Decs RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.decs_muchas(decs,dec); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("LDecs",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dec ::= VAR TypN IDENTIFICADOR 
            {
              Dec RESULT =null;
		Tipo typn = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.var(typn, id); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Dec",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= TYPE TypN IDENTIFICADOR 
            {
              Dec RESULT =null;
		Tipo typn = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.type(typn, id); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Dec",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Dec ::= PROC IDENTIFICADOR ParamsF Bloq 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-2)).value;
		PFs params = (PFs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.proc(id,params,bloque); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Dec",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ParamsF ::= PAP LParamFOpc PCIER 
            {
              PFs RESULT =null;
		PFs params = (PFs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		 RESULT = params; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("ParamsF",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LParamFOpc ::= 
            {
              PFs RESULT =null;
		 RESULT = sem.param_f_sin(); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("LParamFOpc",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LParamFOpc ::= LParamF 
            {
              PFs RESULT =null;
		PFs lparam = (PFs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = lparam; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("LParamFOpc",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LParamF ::= ParamF 
            {
              PFs RESULT =null;
		PF paramf = (PF)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.param_f_con_una(paramf); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("LParamF",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LParamF ::= LParamF COMA ParamF 
            {
              PFs RESULT =null;
		PFs lparamf = (PFs)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-2)).value;
		PF paramf = (PF)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.param_f_con_muchas(lparamf, paramf); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("LParamF",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ParamF ::= TypN AMPSAND IDENTIFICADOR 
            {
              PF RESULT =null;
		Tipo typn = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.param_f_ref(typn,id); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("ParamF",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ParamF ::= TypN IDENTIFICADOR 
            {
              PF RESULT =null;
		Tipo typn = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.param_f_noref(typn,id); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("ParamF",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TypN ::= BaseType 
            {
              Tipo RESULT =null;
		Tipo basetype = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = basetype; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("TypN",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TypN ::= ARRAY SQAP LITENT SQCIER OF BaseType 
            {
              Tipo RESULT =null;
		StringLocalizado litent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-3)).value;
		Tipo basetype = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.tipo_array(litent,basetype); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("TypN",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TypN ::= RECORD CORAP LCampos CORCIER 
            {
              Tipo RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		 RESULT = sem.tipo_record(campos); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("TypN",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // TypN ::= POINTER BaseType 
            {
              Tipo RESULT =null;
		Tipo basetype = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.tipo_pointer(basetype); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("TypN",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LCampos ::= Campo 
            {
              Campos RESULT =null;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.campos_uno(campo); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("LCampos",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LCampos ::= LCampos PUNTOCOM Campo 
            {
              Campos RESULT =null;
		Campos campos = (Campos)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-2)).value;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.campos_muchos(campos,campo); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("LCampos",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Campo ::= TypN IDENTIFICADOR 
            {
              Campo RESULT =null;
		Tipo typn = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.campo(typn, id); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Campo",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BaseType ::= BasicType 
            {
              Tipo RESULT =null;
		Tipo basictype = (Tipo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = basictype; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("BaseType",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BaseType ::= IDENTIFICADOR 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.tipo_iden(id); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("BaseType",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BasicType ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_int(); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("BasicType",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BasicType ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_real(); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("BasicType",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // BasicType ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_bool(); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("BasicType",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // BasicType ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_string(); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("BasicType",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Insts ::= Inst 
            {
              Insts RESULT =null;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.insts_una(inst); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Insts",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Insts ::= Insts PUNTOCOM Inst 
            {
              Insts RESULT =null;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-2)).value;
		Inst inst = (Inst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.insts_muchas(insts, inst); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Insts",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Inst ::= E0 IGUALDAD E0 
            {
              Inst RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-2)).value;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.e_igual(e1, e2); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Inst",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Inst ::= IF E0 THEN LInsts ENDIF 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-3)).value;
		PInst insts = (PInst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		 RESULT = sem.if_(e,insts); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Inst",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Inst ::= IF E0 THEN LInsts ELSE LInsts ENDIF 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-5)).value;
		PInst insts1 = (PInst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-3)).value;
		PInst insts2 = (PInst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		 RESULT = sem.ifelse(e,insts1,insts2); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Inst",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Inst ::= WHILE E0 DO LInsts ENDWHILE 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-3)).value;
		PInst insts = (PInst)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		 RESULT = sem.while_(e,insts); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Inst",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Inst ::= READ E0 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.read(e); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Inst",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Inst ::= WRITE E0 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.write(e); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Inst",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Inst ::= NL 
            {
              Inst RESULT =null;
		 RESULT = sem.nl(); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Inst",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Inst ::= NEW E0 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.new_(e); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Inst",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Inst ::= DELETE E0 
            {
              Inst RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.delete(e); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Inst",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Inst ::= CALL IDENTIFICADOR ParamsR 
            {
              Inst RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		PR params = (PR)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.call(id,params); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Inst",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Inst ::= Bloq 
            {
              Inst RESULT =null;
		Bloque bloq = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.bl(bloq); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Inst",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LInsts ::= 
            {
              PInst RESULT =null;
		 RESULT = sem.lista_sin(); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("LInsts",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LInsts ::= Insts 
            {
              PInst RESULT =null;
		Insts insts = (Insts)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.lista_con(insts); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("LInsts",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ParamsR ::= PAP LParamROpc PCIER 
            {
              PR RESULT =null;
		PR lparamropc = (PR)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		 RESULT = lparamropc; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("ParamsR",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LParamROpc ::= 
            {
              PR RESULT =null;
		 RESULT = sem.param_r_sin(); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("LParamROpc",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LParamROpc ::= LParamR 
            {
              PR RESULT =null;
		PR lparamr = (PR)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = lparamr; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("LParamROpc",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LParamR ::= E0 
            {
              PR RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.param_r_con_una(e); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("LParamR",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LParamR ::= LParamR COMA E0 
            {
              PR RESULT =null;
		PR param = (PR)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-2)).value;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.param_r_con_muchas(param,e); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("LParamR",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Bloq ::= CORAP BloqOpc CORCIER 
            {
              Bloque RESULT =null;
		Bloque bloq = (Bloque)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		 RESULT = bloq; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("Bloq",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // BloqOpc ::= 
            {
              Bloque RESULT =null;
		 RESULT = sem.bloque_sin(); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("BloqOpc",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // BloqOpc ::= Programa 
            {
              Bloque RESULT =null;
		Prog prog = (Prog)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.bloque_con(prog); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("BloqOpc",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E0 ::= E1 OpIn0AsocD E0 
            {
              Exp RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		Exp e0 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.opera_dos(op,e1,e0); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E0",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E0 ::= E1 OpIn0NoAsoc E1 
            {
              Exp RESULT =null;
		Exp e1a = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		Exp e1b = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.opera_dos(op,e1a,e1b); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E0",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E0",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E1 ::= E1 OpIn1AsocI E2 
            {
              Exp RESULT =null;
		Exp e1 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.opera_dos(op,e1,e2); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E1",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E1",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E2 ::= E2 OpIn2AsocI E3 
            {
              Exp RESULT =null;
		Exp e2 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		Exp e3 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.opera_dos(op,e2,e3); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E2",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E2",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E3 ::= E4 OpIn3NoAsoc E4 
            {
              Exp RESULT =null;
		Exp e4a = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		Exp e4b = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.opera_dos(op,e4a,e4b); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E3",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E3",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E4 ::= OpPre4NoAsoc E5 
            {
              Exp RESULT =null;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		Exp e5 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.opera_uno(op,e5); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E4",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E4 ::= OpPre4Asoc E4 
            {
              Exp RESULT =null;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		Exp e4 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.opera_uno(op,e4); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E4",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E4",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E5 ::= E5 OpPos5Asoc 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		OpInfo opinfo = (OpInfo)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.opera_opposcincoasoc(opinfo.op,opinfo.a,opinfo.var,e); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E5",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E5",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E6 ::= OpPre6Asoc E6 
            {
              Exp RESULT =null;
		String op = (String)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		Exp e6 = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.opera_uno(op,e6); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E6",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E6",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= PAP E0 PCIER 
            {
              Exp RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		 RESULT = e; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E7",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= LITENT 
            {
              Exp RESULT =null;
		StringLocalizado litent = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.entero(litent); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E7",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E7 ::= LITREAL 
            {
              Exp RESULT =null;
		StringLocalizado litreal = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.real(litreal); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E7",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E7 ::= LITCAD 
            {
              Exp RESULT =null;
		StringLocalizado litcad = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.cadena(litcad); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E7",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E7 ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = sem.verdadero(); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E7",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E7 ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = sem.falso(); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E7",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E7 ::= IDENTIFICADOR 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = sem.identificador(id); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E7",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // E7 ::= NULL 
            {
              Exp RESULT =null;
		 RESULT = sem.null_(); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("E7",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OpIn0AsocD ::= MAS 
            {
              String RESULT =null;
		 RESULT = "+"; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpIn0AsocD",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OpIn0NoAsoc ::= MENOS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpIn0NoAsoc",30, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OpIn1AsocI ::= AND 
            {
              String RESULT =null;
		 RESULT = "and"; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpIn1AsocI",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OpIn1AsocI ::= OR 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpIn1AsocI",31, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OpIn2AsocI ::= MENOR 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpIn2AsocI",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OpIn2AsocI ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpIn2AsocI",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OpIn2AsocI ::= MENIG 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpIn2AsocI",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OpIn2AsocI ::= MAYIG 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpIn2AsocI",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OpIn2AsocI ::= IGUAL 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpIn2AsocI",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OpIn2AsocI ::= DESIGUAL 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpIn2AsocI",32, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OpIn3NoAsoc ::= POR 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpIn3NoAsoc",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // OpIn3NoAsoc ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpIn3NoAsoc",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // OpIn3NoAsoc ::= MODULO 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpIn3NoAsoc",33, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // OpPre4NoAsoc ::= MENOS 
            {
              String RESULT =null;
		 RESULT = "-"; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpPre4NoAsoc",34, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // OpPre4Asoc ::= NOT 
            {
              String RESULT =null;
		 RESULT = "not"; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpPre4Asoc",35, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // OpPos5Asoc ::= SQAP E0 SQCIER 
            {
              OpInfo RESULT =null;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.elementAt(CUP$AnalizadorSintacticoTinyUno$top-1)).value;
		 RESULT = new OpInfo("index", e, null); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpPos5Asoc",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OpPos5Asoc ::= PUNTO IDENTIFICADOR 
            {
              OpInfo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = new OpInfo("reg", null, id); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpPos5Asoc",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OpPos5Asoc ::= FLECHA IDENTIFICADOR 
            {
              OpInfo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTinyUno$stack.peek()).value;
		 RESULT = new OpInfo("regin", null, id); 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpPos5Asoc",37, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OpPre6Asoc ::= POR 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$AnalizadorSintacticoTinyUno$result = parser.getSymbolFactory().newSymbol("OpPre6Asoc",36, RESULT);
            }
          return CUP$AnalizadorSintacticoTinyUno$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTinyUno$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTinyUno$do_action(
    int                        CUP$AnalizadorSintacticoTinyUno$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTinyUno$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTinyUno$stack,
    int                        CUP$AnalizadorSintacticoTinyUno$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTinyUno$do_action_part00000000(
                               CUP$AnalizadorSintacticoTinyUno$act_num,
                               CUP$AnalizadorSintacticoTinyUno$parser,
                               CUP$AnalizadorSintacticoTinyUno$stack,
                               CUP$AnalizadorSintacticoTinyUno$top);
    }
}

